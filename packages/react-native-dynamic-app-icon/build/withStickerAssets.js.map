{"version":3,"file":"withStickerAssets.js","sourceRoot":"","sources":["../src/withStickerAssets.ts"],"names":[],"mappings":"AAAA,OAAO,EAAgB,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AACtE,OAAO,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AACvD,OAAO,EAAE,MAAM,IAAI,CAAC;AACpB,OAAO,IAAI,MAAM,MAAM,CAAC;AAExB,OAAO,EAAE,0BAA0B,EAAE,MAAM,mBAAmB,CAAC;AAC/D,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAElE,MAAM,kBAAkB,GAAG,mBAAmB,CAAC;AAE/C,MAAM,sBAAsB,GAC1B,qDAAqD,CAAC;AAExD,MAAM,iBAAiB,GAAG,4CAA4C,CAAC;AAEvE,MAAM,WAAW,GAAG;IAClB,MAAM,EAAE,MAAM;IACd,OAAO,EAAE,CAAC;CACX,CAAC;AAEF,MAAM,oBAAoB,GAAG;IAC3B,IAAI,EAAE,WAAW;CAClB,CAAC;AAEF,SAAS,aAAa,CAAC,EACrB,eAAe,EACf,IAAI,EACJ,WAAW,EACX,SAAS,EACT,kBAAkB,GAOnB;IACC,MAAM,WAAW,GAAG,GAAG,IAAI,UAAU,CAAC;IACtC,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;IAC5D,EAAE,CAAC,SAAS,CAAC,WAAW,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IAE/C,iCAAiC;IACjC,MAAM,SAAS,GAAG,QAAQ,SAAS,IAAI,MAAM,EAAE,CAAC;IAEhD,MAAM,QAAQ,GAGV;QACF,IAAI,EAAE,WAAW;QACjB,UAAU,EAAE;YACV,QAAQ,EAAE,SAAS;SACpB;KACF,CAAC;IAEF,oDAAoD;IACpD,IAAI,kBAAkB,EAAE;QACtB,QAAQ,CAAC,UAAU,CAAC,qBAAqB,CAAC,GAAG,kBAAkB,CAAC;KACjE;IAED,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,SAAS,CAAC,EAAE,WAAW,CAAC,CAAC;IAEjE,mBAAmB;IACnB,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;IAC7D,EAAE,CAAC,aAAa,CAAC,YAAY,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC;IAElE,OAAO;QACL,IAAI,EAAE,WAAW;KAClB,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,MAAM,iBAAiB,GAIzB,CAAC,MAAM,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE;IACxC,gCAAgC;IAChC,IAAI,CAAC,IAAI,EAAE;QACT,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC;KAC/C;IAED,OAAO,gBAAgB,CAAC,MAAM,EAAE;QAC9B,KAAK;QACL,KAAK,EAAE,MAAM,EAAE,EAAE;YACf,MAAM,eAAe,GAAG,sBAAsB,CAC5C,MAAM,CAAC,UAAU,CAAC,WAAY,CAC/B,CAAC;YAEF,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAC/B,MAAM,CAAC,UAAU,CAAC,mBAAmB,EACrC,eAAe,CAChB,CAAC;YAEF,MAAM,kBAAkB,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,kBAAkB,CAAC,CAAC;YAE1E,uBAAuB;YACvB,MAAM,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,kBAAkB,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YAEjE,MAAM,4BAA4B,GAAG,IAAI,CAAC,IAAI,CAC5C,kBAAkB,EAClB,eAAe,CAChB,CAAC;YACF,EAAE,CAAC,SAAS,CAAC,kBAAkB,EAAE;gBAC/B,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YACH,gEAAgE;YAChE,EAAE,CAAC,aAAa,CACd,4BAA4B,EAC5B,IAAI,CAAC,SAAS,CAAC,oBAAoB,EAAE,IAAI,EAAE,CAAC,CAAC,CAC9C,CAAC;YAEF,gBAAgB;YAEhB,MAAM,oBAAoB,GAAG,IAAI,CAAC,IAAI,CACpC,eAAe,EACf,sBAAsB,CACvB,CAAC;YACF,4CAA4C;YAC5C,MAAM,oBAAoB,GAAG,IAAI;gBAC/B,CAAC,CAAC,MAAM,0BAA0B,CAC9B,MAAM,CAAC,UAAU,CAAC,WAAW,EAC7B,IAAI,EACJ,oBAAoB,CACrB;gBACH,CAAC,CAAC,EAAE,CAAC;YACP,MAAM,+BAA+B,GAAG,IAAI,CAAC,IAAI,CAC/C,oBAAoB,EACpB,eAAe,CAChB,CAAC;YACF,EAAE,CAAC,SAAS,CAAC,oBAAoB,EAAE;gBACjC,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YAEH,EAAE,CAAC,aAAa,CACd,+BAA+B,EAC/B,IAAI,CAAC,SAAS,CACZ,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,oBAAoB,EAAE,EACnD,IAAI,EACJ,CAAC,CACF,CACF,CAAC;YAEF,MAAM,uBAAuB,GAAG,IAAI,CAAC,IAAI,CACvC,eAAe,EACf,iBAAiB,CAClB,CAAC;YAEF,MAAM,gBAAgB,GAIlB;gBACF,IAAI,EAAE,WAAW;gBACjB,UAAU,EAAE;oBACV,WAAW,EAAE,IAAI;iBAClB;gBACD,QAAQ,EAAE,EAAE;aACb,CAAC;YAEF,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;gBAC3B,KAAK,MAAM,OAAO,IAAI,QAAQ,EAAE;oBAC9B,MAAM,GAAG,GAAG,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC;oBAClE,MAAM,IAAI,GACR,OAAO,OAAO,KAAK,QAAQ;wBACzB,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;wBAC/C,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;oBAEnB,uDAAuD;oBAEvD,oGAAoG;oBACpG,6EAA6E;oBAC7E,qBAAqB;oBACrB,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,MAAM,kBAAkB,CACtD;wBACE,WAAW,EAAE,MAAM,CAAC,UAAU,CAAC,WAAW;wBAC1C,SAAS,EAAE,cAAc;qBAC1B,EACD;wBACE,GAAG;qBACG,CACT,CAAC;oBAEF,eAAe;oBACf,MAAM,OAAO,GAAG,aAAa,CAAC;wBAC5B,eAAe,EAAE,uBAAuB;wBACxC,IAAI,EAAE,IAAI,IAAI,KAAK;wBACnB,WAAW,EAAE,MAAM;wBACnB,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;wBAC9B,kBAAkB,EAAE,OAAO,CAAC,kBAAkB;qBAC/C,CAAC,CAAC;oBAEH,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAAC;wBAC7B,QAAQ,EAAE,OAAO,CAAC,IAAI;qBACvB,CAAC,CAAC;iBACJ;aACF;YAED,MAAM,2BAA2B,GAAG,IAAI,CAAC,IAAI,CAC3C,uBAAuB,EACvB,eAAe,CAChB,CAAC;YACF,EAAE,CAAC,SAAS,CAAC,uBAAuB,EAAE;gBACpC,SAAS,EAAE,IAAI;aAChB,CAAC,CAAC;YACH,OAAO;YACP,EAAE,CAAC,aAAa,CACd,2BAA2B,EAC3B,IAAI,CAAC,SAAS,CAAC,gBAAgB,EAAE,IAAI,EAAE,CAAC,CAAC,CAC1C,CAAC;YAEF,OAAO,MAAM,CAAC;QAChB,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { ConfigPlugin, withDangerousMod } from \"@expo/config-plugins\";\nimport { generateImageAsync } from \"@expo/image-utils\";\nimport fs from \"fs\";\nimport path from \"path\";\n\nimport { generateImessageIconsAsync } from \"./withStickerIcon\";\nimport { getProjectStickersName } from \"./withStickerXcodeTarget\";\n\nconst STICKERS_ROOT_PATH = \"Stickers.xcassets\";\n\nconst IMESSAGE_APP_ICON_PATH =\n  \"Stickers.xcassets/iMessage App Icon.stickersiconset\";\n\nconst STICKER_PACK_PATH = \"Stickers.xcassets/Sticker Pack.stickerpack\";\n\nconst defaultInfo = {\n  author: \"expo\",\n  version: 1,\n};\n\nconst stickersRootContents = {\n  info: defaultInfo,\n};\n\nfunction createSticker({\n  stickerpackPath,\n  name,\n  imageBuffer,\n  extension,\n  accessibilityLabel,\n}: {\n  stickerpackPath: string;\n  name: string;\n  imageBuffer: Buffer;\n  extension?: string;\n  accessibilityLabel?: string;\n}) {\n  const stickerName = `${name}.sticker`;\n  const stickerPath = path.join(stickerpackPath, stickerName);\n  fs.mkdirSync(stickerPath, { recursive: true });\n\n  // TODO: support other mime types\n  const imageName = `image${extension || \".png\"}`;\n\n  const contents: {\n    info: any;\n    properties: { filename?: string; \"accessibility-label\"?: string };\n  } = {\n    info: defaultInfo,\n    properties: {\n      filename: imageName,\n    },\n  };\n\n  // If undefined, defaults to the name of the sticker\n  if (accessibilityLabel) {\n    contents.properties[\"accessibility-label\"] = accessibilityLabel;\n  }\n\n  fs.writeFileSync(path.join(stickerPath, imageName), imageBuffer);\n\n  // Persist contents\n  const contentsPath = path.join(stickerPath, \"Contents.json\");\n  fs.writeFileSync(contentsPath, JSON.stringify(contents, null, 2));\n\n  return {\n    name: stickerName,\n  };\n}\n\nexport const withStickerAssets: ConfigPlugin<{\n  icon?: string;\n  size: string;\n  stickers: Sticker[];\n}> = (config, { stickers, icon, size }) => {\n  // Default to using the app icon\n  if (!icon) {\n    icon = (config.ios || {}).icon || config.icon;\n  }\n\n  return withDangerousMod(config, [\n    \"ios\",\n    async (config) => {\n      const stickerPackName = getProjectStickersName(\n        config.modRequest.projectName!\n      );\n\n      const stickerRootPath = path.join(\n        config.modRequest.platformProjectRoot,\n        stickerPackName\n      );\n\n      const stickersAssetsPath = path.join(stickerRootPath, STICKERS_ROOT_PATH);\n\n      // Delete all assets...\n      await fs.promises.rmdir(stickersAssetsPath, { recursive: true });\n\n      const stickersRootContentsJsonPath = path.join(\n        stickersAssetsPath,\n        \"Contents.json\"\n      );\n      fs.mkdirSync(stickersAssetsPath, {\n        recursive: true,\n      });\n      // Xcode has trouble with the Contents.json for marketing images\n      fs.writeFileSync(\n        stickersRootContentsJsonPath,\n        JSON.stringify(stickersRootContents, null, 2)\n      );\n\n      // iMessage icon\n\n      const iMessageAppIconsPath = path.join(\n        stickerRootPath,\n        IMESSAGE_APP_ICON_PATH\n      );\n      // Only generate icons if an icon is defined\n      const imessageIconContents = icon\n        ? await generateImessageIconsAsync(\n            config.modRequest.projectRoot,\n            icon,\n            iMessageAppIconsPath\n          )\n        : [];\n      const iMessageAppIconContentsJsonPath = path.join(\n        iMessageAppIconsPath,\n        \"Contents.json\"\n      );\n      fs.mkdirSync(iMessageAppIconsPath, {\n        recursive: true,\n      });\n\n      fs.writeFileSync(\n        iMessageAppIconContentsJsonPath,\n        JSON.stringify(\n          { info: defaultInfo, images: imessageIconContents },\n          null,\n          2\n        )\n      );\n\n      const stickerPackContentsPath = path.join(\n        stickerRootPath,\n        STICKER_PACK_PATH\n      );\n\n      const stickersContents: {\n        info: any;\n        properties: { \"grid-size\"?: string };\n        stickers: { filename: string }[];\n      } = {\n        info: defaultInfo,\n        properties: {\n          \"grid-size\": size,\n        },\n        stickers: [],\n      };\n\n      if (Array.isArray(stickers)) {\n        for (const sticker of stickers) {\n          const src = typeof sticker === \"string\" ? sticker : sticker.image;\n          const name =\n            typeof sticker === \"string\"\n              ? path.basename(sticker, path.extname(sticker))\n              : sticker.name;\n\n          // TODO: warn when image is bigger than 512000 bytes...\n\n          // Using this method will cache the images in `.expo` based on the properties used to generate them.\n          // this method also supports remote URLs and using the global sharp instance.\n          // TODO: Support GIFs\n          const { source, name: _name } = await generateImageAsync(\n            {\n              projectRoot: config.modRequest.projectRoot,\n              cacheType: \"ios-stickers\",\n            },\n            {\n              src,\n            } as any\n          );\n\n          // let results;\n          const results = createSticker({\n            stickerpackPath: stickerPackContentsPath,\n            name: name || _name,\n            imageBuffer: source,\n            extension: path.extname(_name),\n            accessibilityLabel: sticker.accessibilityLabel,\n          });\n\n          stickersContents.stickers.push({\n            filename: results.name,\n          });\n        }\n      }\n\n      const stickerPackContentsJsonPath = path.join(\n        stickerPackContentsPath,\n        \"Contents.json\"\n      );\n      fs.mkdirSync(stickerPackContentsPath, {\n        recursive: true,\n      });\n      // TODO\n      fs.writeFileSync(\n        stickerPackContentsJsonPath,\n        JSON.stringify(stickersContents, null, 2)\n      );\n\n      return config;\n    },\n  ]);\n};\n\nexport type Sticker = {\n  image: string;\n  name?: string;\n  accessibilityLabel?: string;\n};\n\nexport type Props = {\n  stickers?: (string | Sticker)[];\n  icon?: string;\n  name?: string;\n  columns?: 2 | 3 | 4;\n};\n"]}