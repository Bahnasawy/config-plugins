{"version":3,"file":"withStickerInfoPlist.js","sourceRoot":"","sources":["../src/withStickerInfoPlist.ts"],"names":[],"mappings":"AAAA,OAAO,EAGL,SAAS,EACT,gBAAgB,GACjB,MAAM,sBAAsB,CAAC;AAC9B,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,KAAK,EAAE,MAAM,IAAI,CAAC;AACzB,OAAO,KAAK,IAAI,MAAM,MAAM,CAAC;AAG7B,OAAO,EAAE,sBAAsB,EAAE,MAAM,0BAA0B,CAAC;AAElE,MAAM,CAAC,MAAM,iBAAiB,GAAsC,CAClE,MAAM,EACN,EAAE,IAAI,EAAE,EACR,EAAE;IACF,OAAO,gBAAgB,CAAC,MAAM,EAAE;QAC9B,KAAK;QACL,KAAK,EAAE,MAAM,EAAE,EAAE;YACf,MAAM,eAAe,GAAG,sBAAsB,CAC5C,MAAM,CAAC,UAAU,CAAC,WAAY,CAC/B,CAAC;YACF,MAAM,eAAe,GAAG,IAAI,CAAC,IAAI,CAC/B,MAAM,CAAC,UAAU,CAAC,mBAAmB,EACrC,eAAe,CAChB,CAAC;YACF,MAAM,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;YAE1D,MAAM,QAAQ,GAAc;gBAC1B,yBAAyB,EAAE,yBAAyB;gBACpD,kBAAkB,EAAE,oBAAoB;gBACxC,kBAAkB,EAAE,8BAA8B;gBAClD,6BAA6B,EAAE,KAAK;gBACpC,YAAY,EAAE,iBAAiB;gBAC/B,mBAAmB,EAAE,gCAAgC;gBACrD,WAAW,EAAE;oBACX,0BAA0B,EAAE,oCAAoC;oBAChE,yBAAyB,EAAE,8BAA8B;iBAC1D;aACF,CAAC;YAEF,QAAQ,CAAC,mBAAmB,GAAG,IAAI,IAAI,eAAe,CAAC;YAEvD,qDAAqD;YACrD,QAAQ,CAAC,eAAe,GAAG,SAAS,CAAC,OAAO,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC;YACpE,QAAQ,CAAC,0BAA0B;gBACjC,SAAS,CAAC,OAAO,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YAEvC,MAAM,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;YACrE,MAAM,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC,QAAQ,EAAE,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;YAE7D,OAAO,MAAM,CAAC;QAChB,CAAC;KACF,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import {\n  ConfigPlugin,\n  InfoPlist,\n  IOSConfig,\n  withDangerousMod,\n} from \"@expo/config-plugins\";\nimport plist from \"@expo/plist\";\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nimport { Props } from \"./withStickerAssets\";\nimport { getProjectStickersName } from \"./withStickerXcodeTarget\";\n\nexport const withStickersPlist: ConfigPlugin<Pick<Props, \"name\">> = (\n  config,\n  { name }\n) => {\n  return withDangerousMod(config, [\n    \"ios\",\n    async (config) => {\n      const stickerPackName = getProjectStickersName(\n        config.modRequest.projectName!\n      );\n      const stickerRootPath = path.join(\n        config.modRequest.platformProjectRoot,\n        stickerPackName\n      );\n      const filePath = path.join(stickerRootPath, \"Info.plist\");\n\n      const stickers: InfoPlist = {\n        CFBundleDevelopmentRegion: \"$(DEVELOPMENT_LANGUAGE)\",\n        CFBundleExecutable: \"$(EXECUTABLE_NAME)\",\n        CFBundleIdentifier: \"$(PRODUCT_BUNDLE_IDENTIFIER)\",\n        CFBundleInfoDictionaryVersion: \"6.0\",\n        CFBundleName: \"$(PRODUCT_NAME)\",\n        CFBundlePackageType: \"$(PRODUCT_BUNDLE_PACKAGE_TYPE)\",\n        NSExtension: {\n          NSExtensionPointIdentifier: \"com.apple.message-payload-provider\",\n          NSExtensionPrincipalClass: \"StickerBrowserViewController\",\n        },\n      };\n\n      stickers.CFBundleDisplayName = name || stickerPackName;\n\n      // The version numbers must match the main Info.plist\n      stickers.CFBundleVersion = IOSConfig.Version.getBuildNumber(config);\n      stickers.CFBundleShortVersionString =\n        IOSConfig.Version.getVersion(config);\n\n      await fs.promises.mkdir(path.dirname(filePath), { recursive: true });\n      await fs.promises.writeFile(filePath, plist.build(stickers));\n\n      return config;\n    },\n  ]);\n};\n"]}